@version: 3.4
# $Header: /var/cvsroot/gentoo-x86/app-admin/syslog-ng/files/3.4/syslog-ng.conf.gentoo,v 1.2 2013/06/02 01:18:35 mr_bones_ Exp $

###########################################
#                                         #
# MANAGED BY PUPPET                       #
#                                         #
# Manual changes WILL be overwritten      #
#                                         #
###########################################

#
# Syslog-ng default configuration file for Gentoo Linux

# https://bugs.gentoo.org/show_bug.cgi?id=426814
@include "scl.conf"

options {
  threaded(yes);
  # disable the chained hostname format in logs (default is enabled)
  chain_hostnames(no);

  # The default action of syslog-ng is to log a STATS line
  # to the file every 10 minutes.  That's pretty ugly after a while.
  # Change it to every 12 hours so you get a nice daily update of
  # how many messages syslog-ng missed (0).
  stats_freq(43200);
  # The default action of syslog-ng is to log a MARK line
  # to the file every 20 minutes.  That's seems high for most
  # people so turn it down to once an hour.  Set it to zero
  # if you don't want the functionality at all.
  mark_freq(3600);

  # enable or disable directory creation for destination files
  create_dirs(yes);

  # use_dns(no);
  use_dns(persist_only);
  dns_cache_hosts(/etc/hosts);
  dns_cache_expire(87600);

  # the number of lines fitting in the output queue
  log_fifo_size(512);

  # default owner, group, and permissions for log files (defaults are 0, 0, 0600)
  owner(root);
  group(logger);
  perm(0640);

  # default owner, group, and permissions for created directories (defaults are 0, 0, 0700)
  dir_owner(root);
  dir_group(logger);
  dir_perm(0740);

  # the time to wait before a died connection is re-established (default is 60)
  time_reopen(10);

  # the time to wait before an idle destination file is closed (default is 60)
  time_reap(360);

  # default no
  use_fqdn(no);

  keep_hostname(yes);

};

source src {
  unix-stream("/dev/log" max-connections(256));
  internal();

  # TODO: from a chrooted bind install
  #unix-stream("/var/named/chroot/dev/log");
};

source kernsrc { file("/proc/kmsg"); };

# source s_syslog { syslog(ip(127.0.0.1) port(1999) transport("tcp")); };
# source s_pipe { pipe("/dev/pipe" pad_size(2048)); };)

# define destinations
destination d_file { file("/var/log/$YEAR.$MONTH.$DAY/everything.log" template("$HOUR:$MIN:$SEC [$LEVEL] [$FACILITY] [$PROGRAM] $MSG\n") template_escape(no)); };

destination d_authlog { file("/var/log/auth.log"); };
destination d_syslog { file("/var/log/syslog"); };
destination d_cron { file("/var/log/cron.log"); };
destination d_daemon { file("/var/log/daemon.log"); };
destination d_kern { file("/var/log/kern.log"); };
destination d_lpr { file("/var/log/lpr.log"); };
destination d_user { file("/var/log/user.log"); };
destination d_uucp { file("/var/log/uucp.log"); };
destination d_ppp { file("/var/log/ppp.log"); };
destination d_iptables { file("/var/log/iptables.log"); };

destination avc { file("/var/log/avc.log"); };
destination audit { file("/var/log/audit.log"); };
destination pax { file("/var/log/pax.log"); };
destination grsec { file("/var/log/grsec.log"); }; 

destination d_mail { file("/var/log/mail.log"); };
destination d_mailinfo { file("/var/log/mail.info"); };
destination d_mailwarn { file("/var/log/mail.warn"); };
destination d_mailerr { file("/var/log/mail.err"); };

destination d_newscrit { file("/var/log/news/news.crit"); };
destination d_newserr { file("/var/log/news/news.err"); };
destination d_newsnotice { file("/var/log/news/news.notice"); };

destination d_debug { file("/var/log/debug"); };
destination d_messages { file("/var/log/messages"); };

destination d_everything { file("/var/log/everything"); };
destination d_console { usertty("root"); };
destination d_console_all { file("/dev/tty12"); };
destination d_loghost { udp("loghost" port(999)); };
destination d_xconsole { pipe("/dev/xconsole"); };

# ...if you intend to use /dev/console for programs like xconsole
# you can comment out the destination line above that references /dev/tty12
# and uncomment the line below.
#destination console_all { file("/dev/console"); };

# create filters
filter f_auth { facility(auth); };
filter f_authpriv { facility(auth, authpriv); };
#filter f_syslog { not facility(authpriv, mail); };
filter f_syslog { program(syslog-ng); };
filter f_cron { facility(cron); };
filter f_daemon { facility(daemon); };
filter f_kern { facility(kern) and not filter(f_iptables); };
filter f_lpr { facility(lpr); };
filter f_mail { facility(mail); };
filter f_user { facility(user); };
filter f_uucp { facility(cron); };
filter f_news { facility(news); };
filter f_ppp { facility(local2); };
filter f_debug { not facility(auth, authpriv, news, mail); };

filter f_messages { level(info..warn) and not facility(auth, authpriv, mail, news, cron) and not program(syslog-ng) and not filter(f_iptables); };

filter f_everything { level(debug..emerg); };

filter f_emergency { level(emerg); };
filter f_info { level(info); };
filter f_notice { level(notice); };
filter f_warn { level(warn); };
filter f_crit { level(crit); };
filter f_err { level(err); };

filter f_iptables { facility(kern) and match("IN=" value("MESSAGE")) and match("OUT=" value("MESSAGE")); };
filter f_acpid { program("acpid"); };
filter f_failed { match("failed" value(MESSAGE)); };
filter f_denied { match("denied" value(MESSAGE)); };
# TODO: consider adding shorewall
filter f_noshorewall { not match("Shorewall" value(MESSAGE)); };              # Filter everything except regex keyword Shorewall
filter f_shorewall { match("Shorewall" value(MESSAGE)); };                    # Filter regex keyword Shorewall

filter f_avc { message(".*avc: .*"); };
filter f_audit { message("^(\\[.*\..*\] |)audit.*") and not message(".*avc: .*"); };
filter f_pax { message("^(\\[.*\..*\] |)PAX:.*"); };
filter f_grsec { message("^(\\[.*\..*\] |)grsec:.*"); }; 

# connect filter and destination
log { source(src); destination(d_file); };

log { source(src); filter(f_authpriv); destination(d_authlog); };
log { source(src); filter(f_syslog); destination(d_syslog); };
log { source(src); filter(f_user); destination(d_user); };

log { source(src); filter(f_cron); destination(d_cron); };
log { source(src); filter(f_daemon); destination(d_daemon); };
log { source(kernsrc); filter(f_kern); destination(d_kern); };
log { source(src); filter(f_lpr); destination(d_lpr); };
log { source(src); filter(f_mail); destination(d_mail); };
log { source(src); filter(f_uucp); destination(d_uucp); };

log { source(kernsrc); filter(f_pax); destination(pax); };
log { source(kernsrc); filter(f_grsec); destination(grsec); };
log { source(kernsrc); filter(f_audit); destination(audit); };
log { source(kernsrc); filter(f_avc); destination(avc); };

log { source(kernsrc); filter(f_iptables); destination(d_iptables); };

log { source(src); filter(f_mail); filter(f_info); destination(d_mailinfo); };
log { source(src); filter(f_mail); filter(f_warn); destination(d_mailwarn); };
log { source(src); filter(f_mail); filter(f_err); destination(d_mailerr); };
log { source(src); filter(f_news); filter(f_crit); destination(d_newscrit); };
log { source(src); filter(f_news); filter(f_err); destination(d_newserr); };
log { source(src); filter(f_news); filter(f_notice); destination(d_newsnotice); };

log { source(src); filter(f_debug); destination(d_debug); };
log { source(src); filter(f_messages); destination(d_messages); };
log { source(src); filter(f_emergency); destination(d_console); };
log { source(src); filter(f_ppp); destination(d_ppp); };

# default log
log { source(src); destination(d_console_all); };

