#!/bin/sh
#
# Updates kernel and initrd using the provision server as the source
# directory

source /usr/local/lib/nitelite/helpers/common.lib.sh;

update_type="$1"
WORKDIR="/tmp/nitelite"

# Initialize our own variables:
initrd=""
kernel=""
package=""
modules=""
quiet=0

############################
# Argument Parsing Functions

function show_help ()
{
cat <<-EOM

$0 [OPTION]

options:

    -k --kernel=NAME           kernel filename
    -i --initrd=NAME           initrd filename
    -p --package=NAME          sources binpkg
    -q --quiet                 do not log messages to STDOUT
    -h --help                  display this message

EOM
    exit 1
}

function get_options () {
    argv=()
    while [ $# -gt 0 ]
    do
        opt=$1
        shift
        case ${opt} in
            -k|--kernel)
                kernel=$1
                shift
                ;;
            --kernel=*)
                kernel=$(echo ${opt} | cut -d'=' -f 2);
                ;;
            -i|--initrd)
                initrd=$1
                shift
                ;;
            --initrd=*)
                initrd=$(echo ${opt} | cut -d'=' -f 2);
                ;;
            -p|--package)
                package=$1
                shift
                ;;
            --package=*)
                package=$(echo ${opt} | cut -d'=' -f 2);
                ;;
            -m|--modules)
                modules=$1
                shift
                ;;
            --modules=*)
                modules=$(echo ${opt} | cut -d'=' -f 2);
                ;;
            -q|--quiet)
                quiet=1
                ;;
            -h|--help)
                show_help
                ;;
            *)
                if [ "${opt:0:1}" = "-" ]; then
                    fail "${opt}: unknown option."
                fi
                argv+=(${opt});;
        esac
    done 
}

#############
# MAIN SCRIPT

# Parse options if they were passed
get_options $*

if [ ! -n "$kernel" ];
then
  fail "Please provide a kernel filename";
fi

if [ ! -n "$initrd" ];
then
  fail "Please provide an initrd filename";
fi

if [ ! -n "$package" ];
then
  fail "Please provide a package filename";
fi

if [ ! -n "$modules" ];
then
  fail "Please provide a modules filename";
fi

mkdir -p "${WORKDIR}";

rsync -avug \
rsync://provision.internal.nitelite.io:/gentoo-boot/$package \
${WORKDIR}/$package;

rsync -avug \
rsync://provision.internal.nitelite.io:/gentoo-boot/$initrd \
${WORKDIR}/$initrd;

rsync -avug \
rsync://provision.internal.nitelite.io:/gentoo-boot/$kernel \
${WORKDIR}/linux-binary.tar.bz2;

rsync -avug \
rsync://provision.internal.nitelite.io:/gentoo-boot/$modules \
${WORKDIR}/modules;

# create backups
mv -f /boot/kernel-* /boot/kernel.old;
mv -f /boot/initrd-* /boot/initrd.old;
mv -f /boot/System.map-* /boot/System.map.old;
mv -f /boot/config-* /boot/config.old;
mv -f /boot/vmlinux-* /boot/vmlinux.old;

tar xjf ${WORKDIR}/linux-binary.tar.bz2 -C /;

# If lib symlink has been clobbered due to the tar extraction, fix it
if [ ! -h "/lib" ];
then
  printf "  -  /lib is no longer a symlink. Fixing...";
  mv /lib/* /lib64/;
  rmdir /lib;
  ln -sv /lib64 /lib;
fi

# give the files predictable names
mv -f /boot/vmlinuz-* /boot/kernel-nitelite;
mv -f ${WORKDIR}/${initrd} /boot/initrd-nitelite;
mv -f /boot/config-* /boot/config-nitelite;
mv -f /boot/System.map-* /boot/System.map-nitelite;
mv -f /boot/vmlinux-* /boot/vmlinux-nitelite;
KERNELVERSION=$(file /boot/kernel-nitelite | awk '{print $9}' | cut -d'-' -f 1);
KVERSION=$(file /boot/kernel-nitelite | awk '{print $9}');
KERNELFILEVERSION="kernel-${KVERSION}"
INITRDFILEVERSION="initrd-${KVERSION}"
PACKAGEFILEVERSION=$(echo ${KVERSION} | awk -F'-' '{print "=hardened-sources-"$1"-"$3}');
# give the files names that are recognizable by grub2
mv -f /boot/kernel-nitelite /boot/$KERNELFILEVERSION;
mv -f /boot/initrd-nitelite /boot/$INITRDFILEVERSION;
mv -f /boot/config-nitelite /boot/config-$KVERSION;
mv -f /boot/System.map-nitelite /boot/System.map-$KVERSION;
mv -f /boot/vmlinux-nitelite /boot/vmlinux-$KVERSION;

printf "  - Configuring kernel module list...  ";
cp ${WORKDIR}/modules /etc/conf.d/modules;
printf "done\n";

printf "  - Installing kernel ${PACKAGEFILEVERSION} (source code)... ";
cp ${WORKDIR}/$package /usr/portage/packages/sys-kernel/${PACKAGEFILEVERSION}
emerge --binpkg-respect-use=y -g ${PACKAGEFILEVERSION};
printf "done\n";

printf "  - Configuring GRUB2... ";
# Generate the final grub2 file based on settings in $GRUBFILE
grub2-mkconfig -o /boot/grub/grub.cfg
printf "done\n";

# place a copy of the new config in the sources directory so portage packages
# can use the config information.
cp -f /boot/config-* /usr/src/linux/.config

rm -rf ${WORKDIR};

