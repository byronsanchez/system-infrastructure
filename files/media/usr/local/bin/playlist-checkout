#!/bin/sh
#
# Copies playlist files to a specified directory

source /usr/local/lib/nitelite/helpers/common.lib.sh;

MUSIC_DIRECTORY="/home/byronsanchez/music"
PLAYLIST_DIRECTORY="$MUSIC_DIRECTORY/playlists"

update_type="$1"
WORKDIR="/tmp/nitelite"

# Initialize our own variables:
destination=""
playlist=""
quiet=0

############################
# Argument Parsing Functions

function show_help ()
{
cat <<-EOM

$0 [OPTION]

options:

    -p --playlist=NAME           playlist name
    -d --destination=NAME        destination path
    -q --quiet                   do not log messages to STDOUT
    -h --help                    display this message

EOM
    exit 1
}

function get_options () {
    argv=()
    while [ $# -gt 0 ]
    do
        opt=$1
        shift
        case ${opt} in
            -p|--playlist)
                playlist=$1
                shift
                ;;
            --playlist=*)
                playlist=$(echo ${opt} | cut -d'=' -f 2);
                ;;
            -d|--destination)
                destination=$1
                shift
                ;;
            --destination=*)
                destination=$(echo ${opt} | cut -d'=' -f 2);
                ;;
            -q|--quiet)
                quiet=1
                ;;
            -h|--help)
                show_help
                ;;
            *)
                if [ "${opt:0:1}" = "-" ]; then
                    fail "${opt}: unknown option."
                fi
                argv+=(${opt});;
        esac
    done 
}

#############
# MAIN SCRIPT

# Parse options if they were passed
get_options $*

if [ ! -n "$playlist" ];
then
  fail "Please provide a playlist name";
fi

if [ ! -n "$destination" ];
then
  fail "Please provide a destination path";
fi

rm -rf "${WORKDIR}"
mkdir "${WORKDIR}"

PLAYLIST_FILE="$PLAYLIST_DIRECTORY/$playlist.m3u"

printf "Checking out: $PLAYLIST_FILE\n"

if [ -e "$PLAYLIST_FILE" ]; then
  playlist_path="${playlist}"

  while read line; do
    music_file=$line
    if [ -e "$MUSIC_DIRECTORY/$music_file" ]; then
      # if the song already exists at the destination, there's no need to recopy it. you could try letting rsync handle this as well.
      if [ -e "${destination}/${playlist}/$music_file" ]; then
        printf "$music_file exists at destination. skipping...\n"
        continue;
      else
        printf "$music_file queued for checkout...\n"
        parentpath="$(dirname "$music_file")"
        destpath="${destination}/${playlist_path}/${parentpath}"

        echo "$music_file" >> "${WORKDIR}/musiclist"
      fi
    fi
  done < "$PLAYLIST_FILE"

  printf "Checking out playlist $PLAYLIST_FILE...\n\n"

  rsync -aqvz --delete-before --files-from="${WORKDIR}/musiclist" "${MUSIC_DIRECTORY}" "${destination}/${playlist}" 
  rsync -aqvz --delete-before "${PLAYLIST_DIRECTORY}/${playlist}.m3u" "${destination}/${playlist}/${playlist}.m3u" 

else

  printf "$PLAYLIST_FILE NOT a playlist file\n"

fi

rm -rf "${WORKDIR}"

