#!/bin/sh

###########################################
#                                         #
# MANAGED BY PUPPET                       #
#                                         #
# Manual changes WILL be overwritten      #
#                                         #
###########################################

# Mirror source fossil repos to git so that other devs can play with code using
# git if they'd like

fossil_dir="/srv/fossil/fossils"
git_dir="/srv/git/repositories"

for organization in $fossil_dir/*;
do

  org_name="$(basename ${organization})"

  for fossil_repo_path in $organization/*;
  do

    fossil_repo="$(basename ${fossil_repo_path})"
    git_repo="$(echo "${fossil_repo}" | sed 's/.fossil/.git/g')"
    git_dst="${git_dir}/${org_name}/${git_repo}"

    if [ ! -e "${git_dst}" ];
    then
      mkdir -p "${git_dst}"
    fi

    cd ${git_dst}

    if [ ! -e "${git_dst}/HEAD" ];
    then
      /usr/bin/git init --bare
      /usr/bin/git config user.name "Byron Sanchez"
      /usr/bin/git config user.email "byron@hackbytes.com"
    fi

    fossil export --git ${fossil_repo_path} | git fast-import --force

    # trunk is always newest
    git branch | grep -q "trunk"
    if [ $? -eq 0 ];
    then
      git branch | grep -q "master"
      if [ $? -eq 0 ];
      then
        # switch to trunk the bare repo way
        git symbolic-ref HEAD refs/heads/trunk
        git branch -d master
      fi

      # convert trunk to master
      git branch -m trunk master
    fi

    # serve via git protocol
    touch "${git_dst}/git-daemon-export-ok"

    # update the description
    description=$(sqlite3 ${fossil_repo_path} "select value from config where name='project-description';")
    echo "${description}" > ${git_dst}/description

  done

done

